import os
import math

corners = ((30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(15, 43),
(19, 43),
(20, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(30, 40),
(30, 33),
(29, 32),
(29, 31),
(28, 30),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 17),
(25, 16),
(25, 14),
(24, 13),
(24, 9),
(23, 8),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
(6, 0),
(6, 3),
(7, 4),
(7, 6),
(8, 6),
(9, 7),
(9, 8),
(10, 9),
(9, 10),
(7, 10),
(6, 11),
(4, 11),
(3, 12),
(2, 12),
(2, 15),
(1, 16),
(0, 16),
(0, 47),
(3, 47),
(4, 46),
(8, 46),
(9, 45),
(10, 45),
(11, 44),
(14, 44),
(16, 42),
(23, 42),
(24, 41),
(25, 41),
(26, 40),
(28, 40),
(28, 37),
(27, 36),
(27, 34),
(28, 33),
(28, 27),
(27, 26),
(27, 22),
(26, 21),
(26, 19),
(25, 18),
(25, 17),
(24, 17),
(23, 16),
(21, 16),
(20, 15),
(20, 14),
(21, 13),
(21, 12),
(22, 11),
(23, 11),
(23, 5),
(22, 4),
(22, 0),
(15, 0),
(15, 1),
(14, 2),
(13, 1),
(13, 0),
)

CENTRAL = (17, 17)
kernel = 3
direct_angle = 56
precission = 2
def calc_cm_angle(img, corners, absolute=(0,0)):
    import numpy as np
    import cv2
    srt = set(sorted(corners, key= lambda x: (x[1], x[0])))

    ax, ay = CENTRAL

    angle_direction = lambda angle, pos: angle / pos * direct_angle > direct_angle - precission and angle / pos * direct_angle < direct_angle + precission
    candidates = set()
    minx, _ = min(srt, key= lambda x: x[0])
    maxx, _ = max(srt, key= lambda x: x[0])
    _, miny = min(srt, key= lambda x: x[1])
    _, maxy = max(srt, key= lambda x: x[1])

    def is_border(point):
        x,y = point
        xp_min = x >= minx and x <= minx + kernel
        xp_max = x <= maxx and x >= maxx - kernel

        yp_min = y >= miny and y <= miny + kernel
        yp_max = y <= maxy and y >= maxy - kernel
        
        return (xp_min or xp_max) and (yp_min or yp_max)

    for c in srt:
        if is_border(c):
            candidates.add(c)

    print(len(candidates))
    _candidates = set()
    for i in candidates:
        for j in candidates:
            # TODO try to find triangles square diffine etalon trigangle and draw it.
            xi, yi = i
            xi, yi = ax + xi, yi + ay
            
            xj, yj = j
            xj, yj = ax + xj, yj + ay

            ab = xi*xj + yi*yj
            ma = round(math.sqrt(xi**2 + yi**2), 2)
            mb = round(math.sqrt(xj**2 + yj**2), 2)

            cosa = round(float(ab) / float(ma*mb), 2)
            # print(ab, ma, mb,round(ma*mb, 2), cosa, xi, xj, yi, yj)
            # print(math.degrees(cosa))
            angle = math.degrees(cosa)
            print(angle)
            # angle = abs(angle) 
            # if angle > direct_angle - precission and angle < direct_angle + precission:
            _candidates.add((i, j))
    print(len(candidates), len(_candidates))

    for i in _candidates:
        p1, p2 = i
        # dx, dy = absolute
        cv2.line(img, p1, p2, (255, 100, 10), 1)
        cv2.line(img, CENTRAL, p1, (255, 100, 10), 1)
        cv2.line(img, CENTRAL, p2, (255, 100, 10), 1)

        cv2.circle(img, p1, 1, (0, 255, 0), 1)
        cv2.circle(img, p2, 1, (0, 255, 0), 1)
    cv2.circle(img, CENTRAL, 2, (0, 0, 255), 1)
    cv2.rectangle(img, (0,0), (34, 34), (100, 255, 20), 1)
    # cv2.imshow('Image', img)
    # cv2.waitKey(0)
    return img



def frames(path):
    frames = 0
    files = os.listdir(path)

    for f in files:
        f = f.split('.')[0]
        f = int(f)
        if f > frames:
            frames = f
    return frames


if __name__ == '__main__':
    calc_cm_angle(None, corners)
